// <auto-generated />
using Application.Infrastructure.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Application.Services.DatabaseMigrations.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250716140201_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "address_standardizer");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "address_standardizer_data_us");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "fuzzystrmatch");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "plpgsql");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis_raster");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis_sfcgal");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis_tiger_geocoder");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis_topology");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Application.Domain.Entities.BusinessHoursEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<LocalTime?>("CloseTime")
                        .HasColumnType("time")
                        .HasColumnName("close_time");

                    b.Property<byte>("DayOfWeekId")
                        .HasColumnType("smallint")
                        .HasColumnName("day_of_week_id");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_closed");

                    b.Property<LocalTime?>("OpenTime")
                        .HasColumnType("time")
                        .HasColumnName("open_time");

                    b.Property<long>("VenueId")
                        .HasColumnType("bigint")
                        .HasColumnName("venue_id");

                    b.HasKey("Id")
                        .HasName("pk_business_hours");

                    b.HasIndex("DayOfWeekId")
                        .HasDatabaseName("ix_business_hours_day_of_week_id");

                    b.HasIndex("VenueId", "DayOfWeekId")
                        .IsUnique()
                        .HasDatabaseName("ix_business_hours_venue_day");

                    b.ToTable("business_hours", (string)null);
                });

            modelBuilder.Entity("Application.Domain.Entities.DayOfWeekEntity", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    b.Property<bool>("IsWeekday")
                        .HasColumnType("boolean")
                        .HasColumnName("is_weekday");

                    b.Property<int>("IsoNumber")
                        .HasColumnType("integer")
                        .HasColumnName("iso_number");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("name");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("short_name");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer")
                        .HasColumnName("sort_order");

                    b.HasKey("Id")
                        .HasName("pk_days_of_week");

                    b.HasIndex("IsoNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_days_of_week_iso_number");

                    b.ToTable("days_of_week", (string)null);

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            IsWeekday = false,
                            IsoNumber = 7,
                            Name = "Sunday",
                            ShortName = "SUN",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = (byte)2,
                            IsWeekday = true,
                            IsoNumber = 1,
                            Name = "Monday",
                            ShortName = "MON",
                            SortOrder = 2
                        },
                        new
                        {
                            Id = (byte)3,
                            IsWeekday = true,
                            IsoNumber = 2,
                            Name = "Tuesday",
                            ShortName = "TUE",
                            SortOrder = 3
                        },
                        new
                        {
                            Id = (byte)4,
                            IsWeekday = true,
                            IsoNumber = 3,
                            Name = "Wednesday",
                            ShortName = "WED",
                            SortOrder = 4
                        },
                        new
                        {
                            Id = (byte)5,
                            IsWeekday = true,
                            IsoNumber = 4,
                            Name = "Thursday",
                            ShortName = "THU",
                            SortOrder = 5
                        },
                        new
                        {
                            Id = (byte)6,
                            IsWeekday = true,
                            IsoNumber = 5,
                            Name = "Friday",
                            ShortName = "FRI",
                            SortOrder = 6
                        },
                        new
                        {
                            Id = (byte)7,
                            IsWeekday = false,
                            IsoNumber = 6,
                            Name = "Saturday",
                            ShortName = "SAT",
                            SortOrder = 7
                        });
                });

            modelBuilder.Entity("Application.Domain.Entities.SpecialCategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<string>("Icon")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("icon");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer")
                        .HasColumnName("sort_order");

                    b.HasKey("Id")
                        .HasName("pk_special_categories");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_special_categories_name");

                    b.ToTable("special_categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Food specials, appetizers, and meal deals",
                            Icon = "🍔",
                            Name = "Food",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Drink specials, happy hours, and beverage promotions",
                            Icon = "🍺",
                            Name = "Drink",
                            SortOrder = 2
                        },
                        new
                        {
                            Id = 3,
                            Description = "Live music, DJs, trivia, karaoke, and other events",
                            Icon = "🎵",
                            Name = "Entertainment",
                            SortOrder = 3
                        });
                });

            modelBuilder.Entity("Application.Domain.Entities.SpecialEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AdditionalData")
                        .HasColumnType("jsonb")
                        .HasColumnName("additional_data");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int>("SpecialCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("special_category_id");

                    b.Property<long?>("SpecialMenuId")
                        .HasColumnType("bigint")
                        .HasColumnName("special_menu_id");

                    b.Property<long>("VenueId")
                        .HasColumnType("bigint")
                        .HasColumnName("venue_id");

                    b.HasKey("Id")
                        .HasName("pk_specials");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_specials_is_active");

                    b.HasIndex("SpecialCategoryId")
                        .HasDatabaseName("ix_specials_category_id");

                    b.HasIndex("SpecialMenuId")
                        .HasDatabaseName("ix_specials_special_menu_id");

                    b.HasIndex("VenueId")
                        .HasDatabaseName("ix_specials_venue_id");

                    b.HasIndex("VenueId", "IsActive")
                        .HasDatabaseName("ix_specials_venue_active");

                    b.ToTable("specials", (string)null);
                });

            modelBuilder.Entity("Application.Domain.Entities.SpecialMenuEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<Instant?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("VenueId")
                        .HasColumnType("bigint")
                        .HasColumnName("venue_id");

                    b.HasKey("Id")
                        .HasName("pk_special_menus");

                    b.HasIndex("VenueId")
                        .HasDatabaseName("ix_special_menus_venue_id");

                    b.HasIndex("VenueId", "Name")
                        .IsUnique()
                        .HasDatabaseName("ix_special_menus_venue_name");

                    b.ToTable("special_menus", (string)null);
                });

            modelBuilder.Entity("Application.Domain.Entities.SpecialMenuScheduleEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<LocalTime>("EndTime")
                        .HasColumnType("time")
                        .HasColumnName("end_time");

                    b.Property<LocalDate?>("ExpirationDate")
                        .HasColumnType("date")
                        .HasColumnName("expiration_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("boolean")
                        .HasColumnName("is_recurring");

                    b.Property<string>("RecurrencePattern")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("recurrence_pattern");

                    b.Property<long>("SpecialMenuId")
                        .HasColumnType("bigint")
                        .HasColumnName("special_menu_id");

                    b.Property<LocalDate>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<LocalTime>("StartTime")
                        .HasColumnType("time")
                        .HasColumnName("start_time");

                    b.HasKey("Id")
                        .HasName("pk_special_menu_schedules");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_special_menu_schedules_is_active");

                    b.HasIndex("SpecialMenuId")
                        .HasDatabaseName("ix_special_menu_schedules_menu_id");

                    b.HasIndex("SpecialMenuId", "IsActive")
                        .HasDatabaseName("ix_special_menu_schedules_menu_active");

                    b.ToTable("special_menu_schedules", (string)null);
                });

            modelBuilder.Entity("Application.Domain.Entities.UserEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<Instant?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_at");

                    b.Property<string>("Sub")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("sub");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_users_is_active");

                    b.HasIndex("Sub")
                        .IsUnique()
                        .HasDatabaseName("ix_users_sub");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Application.Domain.Entities.VenueCategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<string>("Icon")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("icon");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer")
                        .HasColumnName("sort_order");

                    b.HasKey("Id")
                        .HasName("pk_venue_categories");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_venue_categories_name");

                    b.ToTable("venue_categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Dining establishments offering food and beverages",
                            Icon = "🍽️",
                            Name = "Restaurant",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Venues focused on drinks and nightlife",
                            Icon = "🍸",
                            Name = "Bar",
                            SortOrder = 2
                        },
                        new
                        {
                            Id = 3,
                            Description = "Casual spots for coffee and light meals",
                            Icon = "☕",
                            Name = "Cafe",
                            SortOrder = 3
                        },
                        new
                        {
                            Id = 4,
                            Description = "Venues for dancing and late-night entertainment",
                            Icon = "🌃",
                            Name = "Nightclub",
                            SortOrder = 4
                        },
                        new
                        {
                            Id = 5,
                            Description = "Casual venues with food, drinks, and often live music",
                            Icon = "🍺",
                            Name = "Pub",
                            SortOrder = 5
                        },
                        new
                        {
                            Id = 6,
                            Description = "Venues producing wine, offering tastings, food pairings, and live music",
                            Icon = "🍷",
                            Name = "Winery",
                            SortOrder = 6
                        },
                        new
                        {
                            Id = 7,
                            Description = "Venues brewing their own beer, often with food and live music",
                            Icon = "🍻",
                            Name = "Brewery",
                            SortOrder = 7
                        },
                        new
                        {
                            Id = 8,
                            Description = "Sophisticated venues with cocktails, small plates, and live music",
                            Icon = "🛋️",
                            Name = "Lounge",
                            SortOrder = 8
                        },
                        new
                        {
                            Id = 9,
                            Description = "Intimate dining venues with quality food, wine, and occasional live music",
                            Icon = "🥂",
                            Name = "Bistro",
                            SortOrder = 9
                        });
                });

            modelBuilder.Entity("Application.Domain.Entities.VenueEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("country");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("locality");

                    b.Property<Point>("Location")
                        .IsRequired()
                        .HasColumnType("geography (point)")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone_number");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("postal_code");

                    b.Property<string>("ProfileImage")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("profile_image");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("region");

                    b.Property<string>("SecondaryAddress")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("secondary_address");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("street_address");

                    b.Property<string>("Website")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("website");

                    b.HasKey("Id")
                        .HasName("pk_venues");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_venues_category_id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_venues_is_active");

                    b.HasIndex("Location")
                        .HasDatabaseName("ix_venues_location");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Location"), "GIST");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_venues_name");

                    b.HasIndex("IsActive", "CategoryId")
                        .HasDatabaseName("ix_venues_active_category");

                    b.ToTable("venues", (string)null);
                });

            modelBuilder.Entity("Application.Domain.Entities.VenueInvitationEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Instant?>("AcceptedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("accepted_at");

                    b.Property<long?>("AcceptedByUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("accepted_by_user_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("email");

                    b.Property<Instant>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<Instant>("InvitedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("invited_at");

                    b.Property<long>("InvitedByUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("invited_by_user_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("notes");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<long?>("VenueEntityId")
                        .HasColumnType("bigint")
                        .HasColumnName("venue_entity_id");

                    b.Property<long>("VenueId")
                        .HasColumnType("bigint")
                        .HasColumnName("venue_id");

                    b.Property<int?>("VenueRoleEntityId")
                        .HasColumnType("integer")
                        .HasColumnName("venue_role_entity_id");

                    b.HasKey("Id")
                        .HasName("pk_venue_invitations");

                    b.HasIndex("AcceptedByUserId")
                        .HasDatabaseName("ix_venue_invitations_accepted_by_user_id");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("ix_venue_invitations_expires_at");

                    b.HasIndex("InvitedByUserId")
                        .HasDatabaseName("ix_venue_invitations_invited_by");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_venue_invitations_role_id");

                    b.HasIndex("VenueEntityId")
                        .HasDatabaseName("ix_venue_invitations_venue_entity_id");

                    b.HasIndex("VenueId")
                        .HasDatabaseName("ix_venue_invitations_venue_id");

                    b.HasIndex("VenueRoleEntityId")
                        .HasDatabaseName("ix_venue_invitations_venue_role_entity_id");

                    b.HasIndex("IsActive", "AcceptedAt")
                        .HasDatabaseName("ix_venue_invitations_active_accepted");

                    b.HasIndex("Email", "VenueId", "IsActive")
                        .HasDatabaseName("ix_venue_invitations_email_venue_active");

                    b.ToTable("venue_invitations", (string)null);
                });

            modelBuilder.Entity("Application.Domain.Entities.VenueRoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_venue_roles");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_venue_roles_name");

                    b.ToTable("venue_roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Full control over venue settings, staff, and content",
                            Name = "venue-owner"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Can manage venue content, specials, and view reports",
                            Name = "venue-manager"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Can update specials and business hours",
                            Name = "venue-staff"
                        });
                });

            modelBuilder.Entity("Application.Domain.Entities.VenueUserRoleEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Instant>("GrantedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("granted_at");

                    b.Property<long>("GrantedByUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("granted_by_user_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("notes");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long>("VenueId")
                        .HasColumnType("bigint")
                        .HasColumnName("venue_id");

                    b.HasKey("Id")
                        .HasName("pk_venue_user_roles");

                    b.HasIndex("GrantedByUserId")
                        .HasDatabaseName("ix_venue_user_roles_granted_by_user_id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_venue_user_roles_is_active");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_venue_user_roles_role_id");

                    b.HasIndex("VenueId")
                        .HasDatabaseName("ix_venue_user_roles_venue_id");

                    b.HasIndex("UserId", "VenueId")
                        .IsUnique()
                        .HasDatabaseName("ix_venue_user_roles_user_venue");

                    b.HasIndex("VenueId", "RoleId", "IsActive")
                        .HasDatabaseName("ix_venue_user_roles_venue_role_active");

                    b.ToTable("venue_user_roles", (string)null);
                });

            modelBuilder.Entity("Application.Domain.Entities.BusinessHoursEntity", b =>
                {
                    b.HasOne("Application.Domain.Entities.DayOfWeekEntity", "DayOfWeek")
                        .WithMany("BusinessHours")
                        .HasForeignKey("DayOfWeekId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_business_hours_days_of_week_day_of_week_id");

                    b.HasOne("Application.Domain.Entities.VenueEntity", "Venue")
                        .WithMany("BusinessHours")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_business_hours_venues_venue_id");

                    b.Navigation("DayOfWeek");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("Application.Domain.Entities.SpecialEntity", b =>
                {
                    b.HasOne("Application.Domain.Entities.SpecialCategoryEntity", "Category")
                        .WithMany("Specials")
                        .HasForeignKey("SpecialCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_specials_special_categories_special_category_id");

                    b.HasOne("Application.Domain.Entities.SpecialMenuEntity", "SpecialMenu")
                        .WithMany("Specials")
                        .HasForeignKey("SpecialMenuId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_specials_special_menus_special_menu_id");

                    b.HasOne("Application.Domain.Entities.VenueEntity", "Venue")
                        .WithMany("Specials")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_specials_venues_venue_id");

                    b.Navigation("Category");

                    b.Navigation("SpecialMenu");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("Application.Domain.Entities.SpecialMenuEntity", b =>
                {
                    b.HasOne("Application.Domain.Entities.VenueEntity", "Venue")
                        .WithMany("SpecialMenus")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_special_menus_venues_venue_id");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("Application.Domain.Entities.SpecialMenuScheduleEntity", b =>
                {
                    b.HasOne("Application.Domain.Entities.SpecialMenuEntity", "SpecialMenu")
                        .WithMany("Schedules")
                        .HasForeignKey("SpecialMenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_special_menu_schedules_special_menus_special_menu_id");

                    b.Navigation("SpecialMenu");
                });

            modelBuilder.Entity("Application.Domain.Entities.VenueEntity", b =>
                {
                    b.HasOne("Application.Domain.Entities.VenueCategoryEntity", "Category")
                        .WithMany("Venues")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_venues_venue_categories_category_id");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Application.Domain.Entities.VenueInvitationEntity", b =>
                {
                    b.HasOne("Application.Domain.Entities.UserEntity", "AcceptedByUser")
                        .WithMany("ReceivedInvitations")
                        .HasForeignKey("AcceptedByUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_venue_invitations_users_accepted_by_user_id");

                    b.HasOne("Application.Domain.Entities.UserEntity", "InvitedByUser")
                        .WithMany("SentInvitations")
                        .HasForeignKey("InvitedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_venue_invitations_users_invited_by_user_id");

                    b.HasOne("Application.Domain.Entities.VenueRoleEntity", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_venue_invitations_venue_roles_role_id");

                    b.HasOne("Application.Domain.Entities.VenueEntity", null)
                        .WithMany("VenueInvitations")
                        .HasForeignKey("VenueEntityId")
                        .HasConstraintName("fk_venue_invitations_venues_venue_entity_id");

                    b.HasOne("Application.Domain.Entities.VenueEntity", "Venue")
                        .WithMany()
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_venue_invitations_venues_venue_id");

                    b.HasOne("Application.Domain.Entities.VenueRoleEntity", null)
                        .WithMany("VenueInvitations")
                        .HasForeignKey("VenueRoleEntityId")
                        .HasConstraintName("fk_venue_invitations_venue_roles_venue_role_entity_id");

                    b.Navigation("AcceptedByUser");

                    b.Navigation("InvitedByUser");

                    b.Navigation("Role");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("Application.Domain.Entities.VenueUserRoleEntity", b =>
                {
                    b.HasOne("Application.Domain.Entities.UserEntity", "GrantedByUser")
                        .WithMany()
                        .HasForeignKey("GrantedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_venue_user_roles_users_granted_by_user_id");

                    b.HasOne("Application.Domain.Entities.VenueRoleEntity", "Role")
                        .WithMany("VenueUsers")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_venue_user_roles_venue_roles_role_id");

                    b.HasOne("Application.Domain.Entities.UserEntity", "User")
                        .WithMany("VenueRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_venue_user_roles_users_user_id");

                    b.HasOne("Application.Domain.Entities.VenueEntity", "Venue")
                        .WithMany("VenueUsers")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_venue_user_roles_venues_venue_id");

                    b.Navigation("GrantedByUser");

                    b.Navigation("Role");

                    b.Navigation("User");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("Application.Domain.Entities.DayOfWeekEntity", b =>
                {
                    b.Navigation("BusinessHours");
                });

            modelBuilder.Entity("Application.Domain.Entities.SpecialCategoryEntity", b =>
                {
                    b.Navigation("Specials");
                });

            modelBuilder.Entity("Application.Domain.Entities.SpecialMenuEntity", b =>
                {
                    b.Navigation("Schedules");

                    b.Navigation("Specials");
                });

            modelBuilder.Entity("Application.Domain.Entities.UserEntity", b =>
                {
                    b.Navigation("ReceivedInvitations");

                    b.Navigation("SentInvitations");

                    b.Navigation("VenueRoles");
                });

            modelBuilder.Entity("Application.Domain.Entities.VenueCategoryEntity", b =>
                {
                    b.Navigation("Venues");
                });

            modelBuilder.Entity("Application.Domain.Entities.VenueEntity", b =>
                {
                    b.Navigation("BusinessHours");

                    b.Navigation("SpecialMenus");

                    b.Navigation("Specials");

                    b.Navigation("VenueInvitations");

                    b.Navigation("VenueUsers");
                });

            modelBuilder.Entity("Application.Domain.Entities.VenueRoleEntity", b =>
                {
                    b.Navigation("VenueInvitations");

                    b.Navigation("VenueUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
